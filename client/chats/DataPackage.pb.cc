// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataPackage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataPackage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protometa {

namespace {

const ::google::protobuf::Descriptor* DataPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataPackage_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPackage_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataPackage_Message_MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataPackage_Message_ContentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DataPackage_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPackage_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataPackage_Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPackage_Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataPackage_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPackage_Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataPackage_CmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataPackage_2eproto() {
  protobuf_AddDesc_DataPackage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataPackage.proto");
  GOOGLE_CHECK(file != NULL);
  DataPackage_descriptor_ = file->message_type(0);
  static const int DataPackage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, seqno_),
  };
  DataPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPackage_descriptor_,
      DataPackage::default_instance_,
      DataPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPackage));
  DataPackage_Message_descriptor_ = DataPackage_descriptor_->nested_type(0);
  static const int DataPackage_Message_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, serverid_),
  };
  DataPackage_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPackage_Message_descriptor_,
      DataPackage_Message::default_instance_,
      DataPackage_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPackage_Message));
  DataPackage_Message_MessageType_descriptor_ = DataPackage_Message_descriptor_->enum_type(0);
  DataPackage_Message_ContentType_descriptor_ = DataPackage_Message_descriptor_->enum_type(1);
  DataPackage_User_descriptor_ = DataPackage_descriptor_->nested_type(1);
  static const int DataPackage_User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_User, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_User, username_),
  };
  DataPackage_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPackage_User_descriptor_,
      DataPackage_User::default_instance_,
      DataPackage_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPackage_User));
  DataPackage_Group_descriptor_ = DataPackage_descriptor_->nested_type(2);
  static const int DataPackage_Group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Group, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Group, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Group, members_),
  };
  DataPackage_Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPackage_Group_descriptor_,
      DataPackage_Group::default_instance_,
      DataPackage_Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPackage_Group));
  DataPackage_Data_descriptor_ = DataPackage_descriptor_->nested_type(3);
  static const int DataPackage_Data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, group_),
  };
  DataPackage_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPackage_Data_descriptor_,
      DataPackage_Data::default_instance_,
      DataPackage_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPackage_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPackage_Data));
  DataPackage_CmdType_descriptor_ = DataPackage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataPackage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPackage_descriptor_, &DataPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPackage_Message_descriptor_, &DataPackage_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPackage_User_descriptor_, &DataPackage_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPackage_Group_descriptor_, &DataPackage_Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPackage_Data_descriptor_, &DataPackage_Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataPackage_2eproto() {
  delete DataPackage::default_instance_;
  delete DataPackage_reflection_;
  delete DataPackage_Message::default_instance_;
  delete DataPackage_Message_reflection_;
  delete DataPackage_User::default_instance_;
  delete DataPackage_User_reflection_;
  delete DataPackage_Group::default_instance_;
  delete DataPackage_Group_reflection_;
  delete DataPackage_Data::default_instance_;
  delete DataPackage_Data_reflection_;
}

void protobuf_AddDesc_DataPackage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DataPackage.proto\022\tprotometa\"\303\010\n\013DataP"
    "ackage\022+\n\003cmd\030\001 \002(\0162\036.protometa.DataPack"
    "age.CmdType\022)\n\004data\030\002 \001(\0132\033.protometa.Da"
    "taPackage.Data\022\017\n\007version\030\003 \002(\005\022\r\n\005seqNo"
    "\030\004 \002(\005\032\375\002\n\007Message\022\014\n\004from\030\001 \002(\003\022\n\n\002to\030\002"
    " \002(\003\022M\n\007msgType\030\003 \002(\0162*.protometa.DataPa"
    "ckage.Message.MessageType:\020PERSON_TO_PER"
    "SON\022E\n\013contentType\030\004 \002(\0162*.protometa.Dat"
    "aPackage.Message.ContentType:\004TEXT\022\017\n\007co"
    "ntent\030\005 \002(\t\022\017\n\007version\030\006 \001(\003\022\022\n\ncreateTi"
    "me\030\007 \001(\003\022\017\n\007localId\030\010 \001(\003\022\020\n\010serverId\030\t "
    "\001(\003\";\n\013MessageType\022\024\n\020PERSON_TO_PERSON\020\000"
    "\022\t\n\005GROUP\020\001\022\013\n\007CHANNEL\020\002\",\n\013ContentType\022"
    "\010\n\004TEXT\020\000\022\t\n\005VOICE\020\001\022\010\n\004FILE\020\002\032(\n\004User\022\016"
    "\n\006userId\030\001 \001(\003\022\020\n\010userName\030\002 \001(\t\032<\n\005Grou"
    "p\022\017\n\007groupId\030\001 \001(\003\022\021\n\tgroupName\030\002 \001(\t\022\017\n"
    "\007members\030\003 \003(\003\032\261\001\n\004Data\022/\n\007message\030\001 \003(\013"
    "2\036.protometa.DataPackage.Message\022\016\n\006user"
    "Id\030\002 \001(\003\022\020\n\010userName\030\003 \001(\t\022)\n\004user\030\004 \003(\013"
    "2\033.protometa.DataPackage.User\022+\n\005group\030\005"
    " \003(\0132\034.protometa.DataPackage.Group\"\237\002\n\007C"
    "mdType\022\010\n\004SEND\020\000\022\007\n\003ACK\020\001\022\n\n\006NOTIFY\020\002\022\010\n"
    "\004SYNC\020\003\022\013\n\007RECIEVE\020\004\022\027\n\023SEARCH_USER_BY_N"
    "AME\020\n\022\025\n\021SEARCH_USER_BY_ID\020\013\022\016\n\nADD_FRIE"
    "ND\020\014\022\021\n\rDELETE_FRIEND\020\r\022\020\n\014LIST_FRIENDS\020"
    "\016\022\020\n\014CREATE_GROUP\020\024\022\020\n\014UPDATE_GROUP\020\025\022\020\n"
    "\014DELETE_GROUP\020\026\022\025\n\021ADD_GROUP_MEMBERS\020\027\022\030"
    "\n\024DELETE_GROUP_MEMBERS\020\030\022\022\n\016UPDATE_PROFI"
    "LE\020\036", 1124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataPackage.proto", &protobuf_RegisterTypes);
  DataPackage::default_instance_ = new DataPackage();
  DataPackage_Message::default_instance_ = new DataPackage_Message();
  DataPackage_User::default_instance_ = new DataPackage_User();
  DataPackage_Group::default_instance_ = new DataPackage_Group();
  DataPackage_Data::default_instance_ = new DataPackage_Data();
  DataPackage::default_instance_->InitAsDefaultInstance();
  DataPackage_Message::default_instance_->InitAsDefaultInstance();
  DataPackage_User::default_instance_->InitAsDefaultInstance();
  DataPackage_Group::default_instance_->InitAsDefaultInstance();
  DataPackage_Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataPackage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataPackage_2eproto {
  StaticDescriptorInitializer_DataPackage_2eproto() {
    protobuf_AddDesc_DataPackage_2eproto();
  }
} static_descriptor_initializer_DataPackage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DataPackage_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_CmdType_descriptor_;
}
bool DataPackage_CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataPackage_CmdType DataPackage::SEND;
const DataPackage_CmdType DataPackage::ACK;
const DataPackage_CmdType DataPackage::NOTIFY;
const DataPackage_CmdType DataPackage::SYNC;
const DataPackage_CmdType DataPackage::RECIEVE;
const DataPackage_CmdType DataPackage::SEARCH_USER_BY_NAME;
const DataPackage_CmdType DataPackage::SEARCH_USER_BY_ID;
const DataPackage_CmdType DataPackage::ADD_FRIEND;
const DataPackage_CmdType DataPackage::DELETE_FRIEND;
const DataPackage_CmdType DataPackage::LIST_FRIENDS;
const DataPackage_CmdType DataPackage::CREATE_GROUP;
const DataPackage_CmdType DataPackage::UPDATE_GROUP;
const DataPackage_CmdType DataPackage::DELETE_GROUP;
const DataPackage_CmdType DataPackage::ADD_GROUP_MEMBERS;
const DataPackage_CmdType DataPackage::DELETE_GROUP_MEMBERS;
const DataPackage_CmdType DataPackage::UPDATE_PROFILE;
const DataPackage_CmdType DataPackage::CmdType_MIN;
const DataPackage_CmdType DataPackage::CmdType_MAX;
const int DataPackage::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DataPackage_Message_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_Message_MessageType_descriptor_;
}
bool DataPackage_Message_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataPackage_Message_MessageType DataPackage_Message::PERSON_TO_PERSON;
const DataPackage_Message_MessageType DataPackage_Message::GROUP;
const DataPackage_Message_MessageType DataPackage_Message::CHANNEL;
const DataPackage_Message_MessageType DataPackage_Message::MessageType_MIN;
const DataPackage_Message_MessageType DataPackage_Message::MessageType_MAX;
const int DataPackage_Message::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DataPackage_Message_ContentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_Message_ContentType_descriptor_;
}
bool DataPackage_Message_ContentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataPackage_Message_ContentType DataPackage_Message::TEXT;
const DataPackage_Message_ContentType DataPackage_Message::VOICE;
const DataPackage_Message_ContentType DataPackage_Message::FILE;
const DataPackage_Message_ContentType DataPackage_Message::ContentType_MIN;
const DataPackage_Message_ContentType DataPackage_Message::ContentType_MAX;
const int DataPackage_Message::ContentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataPackage_Message::kFromFieldNumber;
const int DataPackage_Message::kToFieldNumber;
const int DataPackage_Message::kMsgTypeFieldNumber;
const int DataPackage_Message::kContentTypeFieldNumber;
const int DataPackage_Message::kContentFieldNumber;
const int DataPackage_Message::kVersionFieldNumber;
const int DataPackage_Message::kCreateTimeFieldNumber;
const int DataPackage_Message::kLocalIdFieldNumber;
const int DataPackage_Message::kServerIdFieldNumber;
#endif  // !_MSC_VER

DataPackage_Message::DataPackage_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPackage_Message::InitAsDefaultInstance() {
}

DataPackage_Message::DataPackage_Message(const DataPackage_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPackage_Message::SharedCtor() {
  _cached_size_ = 0;
  from_ = GOOGLE_LONGLONG(0);
  to_ = GOOGLE_LONGLONG(0);
  msgtype_ = 0;
  contenttype_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_LONGLONG(0);
  createtime_ = GOOGLE_LONGLONG(0);
  localid_ = GOOGLE_LONGLONG(0);
  serverid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPackage_Message::~DataPackage_Message() {
  SharedDtor();
}

void DataPackage_Message::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DataPackage_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPackage_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_Message_descriptor_;
}

const DataPackage_Message& DataPackage_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataPackage_2eproto();
  return *default_instance_;
}

DataPackage_Message* DataPackage_Message::default_instance_ = NULL;

DataPackage_Message* DataPackage_Message::New() const {
  return new DataPackage_Message;
}

void DataPackage_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = GOOGLE_LONGLONG(0);
    to_ = GOOGLE_LONGLONG(0);
    msgtype_ = 0;
    contenttype_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    version_ = GOOGLE_LONGLONG(0);
    createtime_ = GOOGLE_LONGLONG(0);
    localid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    serverid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPackage_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // required int64 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msgType;
        break;
      }

      // required .protometa.DataPackage.Message.MessageType msgType = 3 [default = PERSON_TO_PERSON];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protometa::DataPackage_Message_MessageType_IsValid(value)) {
            set_msgtype(static_cast< ::protometa::DataPackage_Message_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contentType;
        break;
      }

      // required .protometa.DataPackage.Message.ContentType contentType = 4 [default = TEXT];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protometa::DataPackage_Message_ContentType_IsValid(value)) {
            set_contenttype(static_cast< ::protometa::DataPackage_Message_ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // required string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional int64 version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_localId;
        break;
      }

      // optional int64 localId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_serverId;
        break;
      }

      // optional int64 serverId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPackage_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from(), output);
  }

  // required int64 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->to(), output);
  }

  // required .protometa.DataPackage.Message.MessageType msgType = 3 [default = PERSON_TO_PERSON];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->msgtype(), output);
  }

  // required .protometa.DataPackage.Message.ContentType contentType = 4 [default = TEXT];
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->contenttype(), output);
  }

  // required string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  // optional int64 version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->version(), output);
  }

  // optional int64 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->createtime(), output);
  }

  // optional int64 localId = 8;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->localid(), output);
  }

  // optional int64 serverId = 9;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPackage_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->from(), target);
  }

  // required int64 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->to(), target);
  }

  // required .protometa.DataPackage.Message.MessageType msgType = 3 [default = PERSON_TO_PERSON];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->msgtype(), target);
  }

  // required .protometa.DataPackage.Message.ContentType contentType = 4 [default = TEXT];
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->contenttype(), target);
  }

  // required string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional int64 version = 6;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->version(), target);
  }

  // optional int64 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->createtime(), target);
  }

  // optional int64 localId = 8;
  if (has_localid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->localid(), target);
  }

  // optional int64 serverId = 9;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPackage_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from());
    }

    // required int64 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to());
    }

    // required .protometa.DataPackage.Message.MessageType msgType = 3 [default = PERSON_TO_PERSON];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required .protometa.DataPackage.Message.ContentType contentType = 4 [default = TEXT];
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contenttype());
    }

    // required string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 localId = 8;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->localid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 serverId = 9;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPackage_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPackage_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPackage_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPackage_Message::MergeFrom(const DataPackage_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_localid()) {
      set_localid(from.localid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPackage_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage_Message::CopyFrom(const DataPackage_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DataPackage_Message::Swap(DataPackage_Message* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(content_, other->content_);
    std::swap(version_, other->version_);
    std::swap(createtime_, other->createtime_);
    std::swap(localid_, other->localid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPackage_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPackage_Message_descriptor_;
  metadata.reflection = DataPackage_Message_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataPackage_User::kUserIdFieldNumber;
const int DataPackage_User::kUserNameFieldNumber;
#endif  // !_MSC_VER

DataPackage_User::DataPackage_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPackage_User::InitAsDefaultInstance() {
}

DataPackage_User::DataPackage_User(const DataPackage_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPackage_User::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPackage_User::~DataPackage_User() {
  SharedDtor();
}

void DataPackage_User::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void DataPackage_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPackage_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_User_descriptor_;
}

const DataPackage_User& DataPackage_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataPackage_2eproto();
  return *default_instance_;
}

DataPackage_User* DataPackage_User::default_instance_ = NULL;

DataPackage_User* DataPackage_User::New() const {
  return new DataPackage_User;
}

void DataPackage_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPackage_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // optional string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPackage_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPackage_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPackage_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPackage_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPackage_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPackage_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPackage_User::MergeFrom(const DataPackage_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPackage_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage_User::CopyFrom(const DataPackage_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage_User::IsInitialized() const {

  return true;
}

void DataPackage_User::Swap(DataPackage_User* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPackage_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPackage_User_descriptor_;
  metadata.reflection = DataPackage_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataPackage_Group::kGroupIdFieldNumber;
const int DataPackage_Group::kGroupNameFieldNumber;
const int DataPackage_Group::kMembersFieldNumber;
#endif  // !_MSC_VER

DataPackage_Group::DataPackage_Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPackage_Group::InitAsDefaultInstance() {
}

DataPackage_Group::DataPackage_Group(const DataPackage_Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPackage_Group::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_LONGLONG(0);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPackage_Group::~DataPackage_Group() {
  SharedDtor();
}

void DataPackage_Group::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void DataPackage_Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPackage_Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_Group_descriptor_;
}

const DataPackage_Group& DataPackage_Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataPackage_2eproto();
  return *default_instance_;
}

DataPackage_Group* DataPackage_Group::default_instance_ = NULL;

DataPackage_Group* DataPackage_Group::New() const {
  return new DataPackage_Group;
}

void DataPackage_Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_LONGLONG(0);
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPackage_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupName;
        break;
      }

      // optional string groupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_members;
        break;
      }

      // repeated int64 members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPackage_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->groupid(), output);
  }

  // optional string groupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }

  // repeated int64 members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPackage_Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->groupid(), target);
  }

  // optional string groupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated int64 members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPackage_Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

    // optional string groupName = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated int64 members = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPackage_Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPackage_Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPackage_Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPackage_Group::MergeFrom(const DataPackage_Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPackage_Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage_Group::CopyFrom(const DataPackage_Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage_Group::IsInitialized() const {

  return true;
}

void DataPackage_Group::Swap(DataPackage_Group* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(groupname_, other->groupname_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPackage_Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPackage_Group_descriptor_;
  metadata.reflection = DataPackage_Group_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataPackage_Data::kMessageFieldNumber;
const int DataPackage_Data::kUserIdFieldNumber;
const int DataPackage_Data::kUserNameFieldNumber;
const int DataPackage_Data::kUserFieldNumber;
const int DataPackage_Data::kGroupFieldNumber;
#endif  // !_MSC_VER

DataPackage_Data::DataPackage_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPackage_Data::InitAsDefaultInstance() {
}

DataPackage_Data::DataPackage_Data(const DataPackage_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPackage_Data::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPackage_Data::~DataPackage_Data() {
  SharedDtor();
}

void DataPackage_Data::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void DataPackage_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPackage_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_Data_descriptor_;
}

const DataPackage_Data& DataPackage_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataPackage_2eproto();
  return *default_instance_;
}

DataPackage_Data* DataPackage_Data::default_instance_ = NULL;

DataPackage_Data* DataPackage_Data::New() const {
  return new DataPackage_Data;
}

void DataPackage_Data::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  message_.Clear();
  user_.Clear();
  group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPackage_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protometa.DataPackage.Message message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_message;
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional int64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }

      // optional string userName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // repeated .protometa.DataPackage.User user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        if (input->ExpectTag(42)) goto parse_group;
        break;
      }

      // repeated .protometa.DataPackage.Group group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPackage_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protometa.DataPackage.Message message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message(i), output);
  }

  // optional int64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  // optional string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }

  // repeated .protometa.DataPackage.User user = 4;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user(i), output);
  }

  // repeated .protometa.DataPackage.Group group = 5;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->group(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPackage_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protometa.DataPackage.Message message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message(i), target);
  }

  // optional int64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  // optional string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // repeated .protometa.DataPackage.User user = 4;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user(i), target);
  }

  // repeated .protometa.DataPackage.Group group = 5;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->group(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPackage_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional string userName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  // repeated .protometa.DataPackage.Message message = 1;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message(i));
  }

  // repeated .protometa.DataPackage.User user = 4;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .protometa.DataPackage.Group group = 5;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPackage_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPackage_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPackage_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPackage_Data::MergeFrom(const DataPackage_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  user_.MergeFrom(from.user_);
  group_.MergeFrom(from.group_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPackage_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage_Data::CopyFrom(const DataPackage_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage_Data::IsInitialized() const {

  for (int i = 0; i < message_size(); i++) {
    if (!this->message(i).IsInitialized()) return false;
  }
  return true;
}

void DataPackage_Data::Swap(DataPackage_Data* other) {
  if (other != this) {
    message_.Swap(&other->message_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    user_.Swap(&other->user_);
    group_.Swap(&other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPackage_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPackage_Data_descriptor_;
  metadata.reflection = DataPackage_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DataPackage::kCmdFieldNumber;
const int DataPackage::kDataFieldNumber;
const int DataPackage::kVersionFieldNumber;
const int DataPackage::kSeqNoFieldNumber;
#endif  // !_MSC_VER

DataPackage::DataPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPackage::InitAsDefaultInstance() {
  data_ = const_cast< ::protometa::DataPackage_Data*>(&::protometa::DataPackage_Data::default_instance());
}

DataPackage::DataPackage(const DataPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPackage::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  data_ = NULL;
  version_ = 0;
  seqno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPackage::~DataPackage() {
  SharedDtor();
}

void DataPackage::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DataPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPackage_descriptor_;
}

const DataPackage& DataPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataPackage_2eproto();
  return *default_instance_;
}

DataPackage* DataPackage::default_instance_ = NULL;

DataPackage* DataPackage::New() const {
  return new DataPackage;
}

void DataPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::protometa::DataPackage_Data::Clear();
    }
    version_ = 0;
    seqno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protometa.DataPackage.CmdType cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protometa::DataPackage_CmdType_IsValid(value)) {
            set_cmd(static_cast< ::protometa::DataPackage_CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .protometa.DataPackage.Data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seqNo;
        break;
      }

      // required int32 seqNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protometa.DataPackage.CmdType cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .protometa.DataPackage.Data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // required int32 seqNo = 4;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seqno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protometa.DataPackage.CmdType cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .protometa.DataPackage.Data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // required int32 seqNo = 4;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seqno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protometa.DataPackage.CmdType cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .protometa.DataPackage.Data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required int32 seqNo = 4;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPackage::MergeFrom(const DataPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_data()) {
      mutable_data()->::protometa::DataPackage_Data::MergeFrom(from.data());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage::CopyFrom(const DataPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void DataPackage::Swap(DataPackage* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(version_, other->version_);
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPackage_descriptor_;
  metadata.reflection = DataPackage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protometa

// @@protoc_insertion_point(global_scope)
