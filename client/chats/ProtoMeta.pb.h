// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMeta.proto

#ifndef PROTOBUF_ProtoMeta_2eproto__INCLUDED
#define PROTOBUF_ProtoMeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoMeta_2eproto();
void protobuf_AssignDesc_ProtoMeta_2eproto();
void protobuf_ShutdownFile_ProtoMeta_2eproto();

class DataPackage;
class DataPackage_Message;
class DataPackage_User;
class DataPackage_Group;
class DataPackage_Data;

enum DataPackage_Message_MessageType {
  DataPackage_Message_MessageType_PERSON_TO_PERSON = 0,
  DataPackage_Message_MessageType_GROUP = 1,
  DataPackage_Message_MessageType_CHANNEL = 2
};
bool DataPackage_Message_MessageType_IsValid(int value);
const DataPackage_Message_MessageType DataPackage_Message_MessageType_MessageType_MIN = DataPackage_Message_MessageType_PERSON_TO_PERSON;
const DataPackage_Message_MessageType DataPackage_Message_MessageType_MessageType_MAX = DataPackage_Message_MessageType_CHANNEL;
const int DataPackage_Message_MessageType_MessageType_ARRAYSIZE = DataPackage_Message_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataPackage_Message_MessageType_descriptor();
inline const ::std::string& DataPackage_Message_MessageType_Name(DataPackage_Message_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataPackage_Message_MessageType_descriptor(), value);
}
inline bool DataPackage_Message_MessageType_Parse(
    const ::std::string& name, DataPackage_Message_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataPackage_Message_MessageType>(
    DataPackage_Message_MessageType_descriptor(), name, value);
}
enum DataPackage_Message_ContentType {
  DataPackage_Message_ContentType_TEXT = 0,
  DataPackage_Message_ContentType_VOICE = 1,
  DataPackage_Message_ContentType_FILE = 2
};
bool DataPackage_Message_ContentType_IsValid(int value);
const DataPackage_Message_ContentType DataPackage_Message_ContentType_ContentType_MIN = DataPackage_Message_ContentType_TEXT;
const DataPackage_Message_ContentType DataPackage_Message_ContentType_ContentType_MAX = DataPackage_Message_ContentType_FILE;
const int DataPackage_Message_ContentType_ContentType_ARRAYSIZE = DataPackage_Message_ContentType_ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataPackage_Message_ContentType_descriptor();
inline const ::std::string& DataPackage_Message_ContentType_Name(DataPackage_Message_ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataPackage_Message_ContentType_descriptor(), value);
}
inline bool DataPackage_Message_ContentType_Parse(
    const ::std::string& name, DataPackage_Message_ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataPackage_Message_ContentType>(
    DataPackage_Message_ContentType_descriptor(), name, value);
}
enum DataPackage_CmdType {
  DataPackage_CmdType_SEND = 0,
  DataPackage_CmdType_ACK = 1,
  DataPackage_CmdType_NOTIFY = 2,
  DataPackage_CmdType_SYNC = 3,
  DataPackage_CmdType_RECIEVE = 4,
  DataPackage_CmdType_SEARCH_USER_BY_NAME = 10,
  DataPackage_CmdType_SEARCH_USER_BY_ID = 11,
  DataPackage_CmdType_ADD_FRIEND = 12,
  DataPackage_CmdType_DELETE_FRIEND = 13,
  DataPackage_CmdType_LIST_FRIENDS = 14,
  DataPackage_CmdType_CREATE_GROUP = 20,
  DataPackage_CmdType_UPDATE_GROUP = 21,
  DataPackage_CmdType_DELETE_GROUP = 22,
  DataPackage_CmdType_ADD_GROUP_MEMBERS = 23,
  DataPackage_CmdType_DELETE_GROUP_MEMBERS = 24,
  DataPackage_CmdType_UPDATE_PROFILE = 30
};
bool DataPackage_CmdType_IsValid(int value);
const DataPackage_CmdType DataPackage_CmdType_CmdType_MIN = DataPackage_CmdType_SEND;
const DataPackage_CmdType DataPackage_CmdType_CmdType_MAX = DataPackage_CmdType_UPDATE_PROFILE;
const int DataPackage_CmdType_CmdType_ARRAYSIZE = DataPackage_CmdType_CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataPackage_CmdType_descriptor();
inline const ::std::string& DataPackage_CmdType_Name(DataPackage_CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataPackage_CmdType_descriptor(), value);
}
inline bool DataPackage_CmdType_Parse(
    const ::std::string& name, DataPackage_CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataPackage_CmdType>(
    DataPackage_CmdType_descriptor(), name, value);
}
// ===================================================================

class DataPackage_Message : public ::google::protobuf::Message {
 public:
  DataPackage_Message();
  virtual ~DataPackage_Message();

  DataPackage_Message(const DataPackage_Message& from);

  inline DataPackage_Message& operator=(const DataPackage_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage_Message& default_instance();

  void Swap(DataPackage_Message* other);

  // implements Message ----------------------------------------------

  DataPackage_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage_Message& from);
  void MergeFrom(const DataPackage_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataPackage_Message_MessageType MessageType;
  static const MessageType PERSON_TO_PERSON = DataPackage_Message_MessageType_PERSON_TO_PERSON;
  static const MessageType GROUP = DataPackage_Message_MessageType_GROUP;
  static const MessageType CHANNEL = DataPackage_Message_MessageType_CHANNEL;
  static inline bool MessageType_IsValid(int value) {
    return DataPackage_Message_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    DataPackage_Message_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    DataPackage_Message_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    DataPackage_Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return DataPackage_Message_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return DataPackage_Message_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return DataPackage_Message_MessageType_Parse(name, value);
  }

  typedef DataPackage_Message_ContentType ContentType;
  static const ContentType TEXT = DataPackage_Message_ContentType_TEXT;
  static const ContentType VOICE = DataPackage_Message_ContentType_VOICE;
  static const ContentType FILE = DataPackage_Message_ContentType_FILE;
  static inline bool ContentType_IsValid(int value) {
    return DataPackage_Message_ContentType_IsValid(value);
  }
  static const ContentType ContentType_MIN =
    DataPackage_Message_ContentType_ContentType_MIN;
  static const ContentType ContentType_MAX =
    DataPackage_Message_ContentType_ContentType_MAX;
  static const int ContentType_ARRAYSIZE =
    DataPackage_Message_ContentType_ContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentType_descriptor() {
    return DataPackage_Message_ContentType_descriptor();
  }
  static inline const ::std::string& ContentType_Name(ContentType value) {
    return DataPackage_Message_ContentType_Name(value);
  }
  static inline bool ContentType_Parse(const ::std::string& name,
      ContentType* value) {
    return DataPackage_Message_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline ::google::protobuf::int64 from() const;
  inline void set_from(::google::protobuf::int64 value);

  // required int64 to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline ::google::protobuf::int64 to() const;
  inline void set_to(::google::protobuf::int64 value);

  // required .proto.DataPackage.Message.MessageType msgType = 3 [default = PERSON_TO_PERSON];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  inline ::proto::DataPackage_Message_MessageType msgtype() const;
  inline void set_msgtype(::proto::DataPackage_Message_MessageType value);

  // required .proto.DataPackage.Message.ContentType contentType = 4 [default = TEXT];
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 4;
  inline ::proto::DataPackage_Message_ContentType contenttype() const;
  inline void set_contenttype(::proto::DataPackage_Message_ContentType value);

  // required string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // optional int64 createTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 localId = 8;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIdFieldNumber = 8;
  inline ::google::protobuf::int64 localid() const;
  inline void set_localid(::google::protobuf::int64 value);

  // optional int64 serverId = 9;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 9;
  inline ::google::protobuf::int64 serverid() const;
  inline void set_serverid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.DataPackage.Message)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 from_;
  ::google::protobuf::int64 to_;
  int msgtype_;
  int contenttype_;
  ::std::string* content_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 localid_;
  ::google::protobuf::int64 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoMeta_2eproto();
  friend void protobuf_AssignDesc_ProtoMeta_2eproto();
  friend void protobuf_ShutdownFile_ProtoMeta_2eproto();

  void InitAsDefaultInstance();
  static DataPackage_Message* default_instance_;
};
// -------------------------------------------------------------------

class DataPackage_User : public ::google::protobuf::Message {
 public:
  DataPackage_User();
  virtual ~DataPackage_User();

  DataPackage_User(const DataPackage_User& from);

  inline DataPackage_User& operator=(const DataPackage_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage_User& default_instance();

  void Swap(DataPackage_User* other);

  // implements Message ----------------------------------------------

  DataPackage_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage_User& from);
  void MergeFrom(const DataPackage_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:proto.DataPackage.User)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::std::string* username_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoMeta_2eproto();
  friend void protobuf_AssignDesc_ProtoMeta_2eproto();
  friend void protobuf_ShutdownFile_ProtoMeta_2eproto();

  void InitAsDefaultInstance();
  static DataPackage_User* default_instance_;
};
// -------------------------------------------------------------------

class DataPackage_Group : public ::google::protobuf::Message {
 public:
  DataPackage_Group();
  virtual ~DataPackage_Group();

  DataPackage_Group(const DataPackage_Group& from);

  inline DataPackage_Group& operator=(const DataPackage_Group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage_Group& default_instance();

  void Swap(DataPackage_Group* other);

  // implements Message ----------------------------------------------

  DataPackage_Group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage_Group& from);
  void MergeFrom(const DataPackage_Group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // optional string groupName = 2;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // repeated int64 members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline ::google::protobuf::int64 members(int index) const;
  inline void set_members(int index, ::google::protobuf::int64 value);
  inline void add_members(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      members() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:proto.DataPackage.Group)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_groupname();
  inline void clear_has_groupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 groupid_;
  ::std::string* groupname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoMeta_2eproto();
  friend void protobuf_AssignDesc_ProtoMeta_2eproto();
  friend void protobuf_ShutdownFile_ProtoMeta_2eproto();

  void InitAsDefaultInstance();
  static DataPackage_Group* default_instance_;
};
// -------------------------------------------------------------------

class DataPackage_Data : public ::google::protobuf::Message {
 public:
  DataPackage_Data();
  virtual ~DataPackage_Data();

  DataPackage_Data(const DataPackage_Data& from);

  inline DataPackage_Data& operator=(const DataPackage_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage_Data& default_instance();

  void Swap(DataPackage_Data* other);

  // implements Message ----------------------------------------------

  DataPackage_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage_Data& from);
  void MergeFrom(const DataPackage_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.DataPackage.Message message = 1;
  inline int message_size() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::proto::DataPackage_Message& message(int index) const;
  inline ::proto::DataPackage_Message* mutable_message(int index);
  inline ::proto::DataPackage_Message* add_message();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Message >&
      message() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Message >*
      mutable_message();

  // optional int64 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string userName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // repeated .proto.DataPackage.User user = 4;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::proto::DataPackage_User& user(int index) const;
  inline ::proto::DataPackage_User* mutable_user(int index);
  inline ::proto::DataPackage_User* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_User >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_User >*
      mutable_user();

  // repeated .proto.DataPackage.Group group = 5;
  inline int group_size() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline const ::proto::DataPackage_Group& group(int index) const;
  inline ::proto::DataPackage_Group* mutable_group(int index);
  inline ::proto::DataPackage_Group* add_group();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Group >&
      group() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Group >*
      mutable_group();

  // @@protoc_insertion_point(class_scope:proto.DataPackage.Data)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Message > message_;
  ::google::protobuf::int64 userid_;
  ::std::string* username_;
  ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_User > user_;
  ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Group > group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoMeta_2eproto();
  friend void protobuf_AssignDesc_ProtoMeta_2eproto();
  friend void protobuf_ShutdownFile_ProtoMeta_2eproto();

  void InitAsDefaultInstance();
  static DataPackage_Data* default_instance_;
};
// -------------------------------------------------------------------

class DataPackage : public ::google::protobuf::Message {
 public:
  DataPackage();
  virtual ~DataPackage();

  DataPackage(const DataPackage& from);

  inline DataPackage& operator=(const DataPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage& default_instance();

  void Swap(DataPackage* other);

  // implements Message ----------------------------------------------

  DataPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage& from);
  void MergeFrom(const DataPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataPackage_Message Message;
  typedef DataPackage_User User;
  typedef DataPackage_Group Group;
  typedef DataPackage_Data Data;

  typedef DataPackage_CmdType CmdType;
  static const CmdType SEND = DataPackage_CmdType_SEND;
  static const CmdType ACK = DataPackage_CmdType_ACK;
  static const CmdType NOTIFY = DataPackage_CmdType_NOTIFY;
  static const CmdType SYNC = DataPackage_CmdType_SYNC;
  static const CmdType RECIEVE = DataPackage_CmdType_RECIEVE;
  static const CmdType SEARCH_USER_BY_NAME = DataPackage_CmdType_SEARCH_USER_BY_NAME;
  static const CmdType SEARCH_USER_BY_ID = DataPackage_CmdType_SEARCH_USER_BY_ID;
  static const CmdType ADD_FRIEND = DataPackage_CmdType_ADD_FRIEND;
  static const CmdType DELETE_FRIEND = DataPackage_CmdType_DELETE_FRIEND;
  static const CmdType LIST_FRIENDS = DataPackage_CmdType_LIST_FRIENDS;
  static const CmdType CREATE_GROUP = DataPackage_CmdType_CREATE_GROUP;
  static const CmdType UPDATE_GROUP = DataPackage_CmdType_UPDATE_GROUP;
  static const CmdType DELETE_GROUP = DataPackage_CmdType_DELETE_GROUP;
  static const CmdType ADD_GROUP_MEMBERS = DataPackage_CmdType_ADD_GROUP_MEMBERS;
  static const CmdType DELETE_GROUP_MEMBERS = DataPackage_CmdType_DELETE_GROUP_MEMBERS;
  static const CmdType UPDATE_PROFILE = DataPackage_CmdType_UPDATE_PROFILE;
  static inline bool CmdType_IsValid(int value) {
    return DataPackage_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    DataPackage_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    DataPackage_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    DataPackage_CmdType_CmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdType_descriptor() {
    return DataPackage_CmdType_descriptor();
  }
  static inline const ::std::string& CmdType_Name(CmdType value) {
    return DataPackage_CmdType_Name(value);
  }
  static inline bool CmdType_Parse(const ::std::string& name,
      CmdType* value) {
    return DataPackage_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .proto.DataPackage.CmdType cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::proto::DataPackage_CmdType cmd() const;
  inline void set_cmd(::proto::DataPackage_CmdType value);

  // optional .proto.DataPackage.Data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::proto::DataPackage_Data& data() const;
  inline ::proto::DataPackage_Data* mutable_data();
  inline ::proto::DataPackage_Data* release_data();
  inline void set_allocated_data(::proto::DataPackage_Data* data);

  // required int32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required int32 seqNo = 4;
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqNoFieldNumber = 4;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DataPackage)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_seqno();
  inline void clear_has_seqno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::DataPackage_Data* data_;
  int cmd_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 seqno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoMeta_2eproto();
  friend void protobuf_AssignDesc_ProtoMeta_2eproto();
  friend void protobuf_ShutdownFile_ProtoMeta_2eproto();

  void InitAsDefaultInstance();
  static DataPackage* default_instance_;
};
// ===================================================================


// ===================================================================

// DataPackage_Message

// required int64 from = 1;
inline bool DataPackage_Message::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPackage_Message::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPackage_Message::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPackage_Message::clear_from() {
  from_ = GOOGLE_LONGLONG(0);
  clear_has_from();
}
inline ::google::protobuf::int64 DataPackage_Message::from() const {
  return from_;
}
inline void DataPackage_Message::set_from(::google::protobuf::int64 value) {
  set_has_from();
  from_ = value;
}

// required int64 to = 2;
inline bool DataPackage_Message::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPackage_Message::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPackage_Message::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPackage_Message::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
  clear_has_to();
}
inline ::google::protobuf::int64 DataPackage_Message::to() const {
  return to_;
}
inline void DataPackage_Message::set_to(::google::protobuf::int64 value) {
  set_has_to();
  to_ = value;
}

// required .proto.DataPackage.Message.MessageType msgType = 3 [default = PERSON_TO_PERSON];
inline bool DataPackage_Message::has_msgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataPackage_Message::set_has_msgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataPackage_Message::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataPackage_Message::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::proto::DataPackage_Message_MessageType DataPackage_Message::msgtype() const {
  return static_cast< ::proto::DataPackage_Message_MessageType >(msgtype_);
}
inline void DataPackage_Message::set_msgtype(::proto::DataPackage_Message_MessageType value) {
  assert(::proto::DataPackage_Message_MessageType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
}

// required .proto.DataPackage.Message.ContentType contentType = 4 [default = TEXT];
inline bool DataPackage_Message::has_contenttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataPackage_Message::set_has_contenttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataPackage_Message::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataPackage_Message::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::proto::DataPackage_Message_ContentType DataPackage_Message::contenttype() const {
  return static_cast< ::proto::DataPackage_Message_ContentType >(contenttype_);
}
inline void DataPackage_Message::set_contenttype(::proto::DataPackage_Message_ContentType value) {
  assert(::proto::DataPackage_Message_ContentType_IsValid(value));
  set_has_contenttype();
  contenttype_ = value;
}

// required string content = 5;
inline bool DataPackage_Message::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataPackage_Message::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataPackage_Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataPackage_Message::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DataPackage_Message::content() const {
  return *content_;
}
inline void DataPackage_Message::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataPackage_Message::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DataPackage_Message::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataPackage_Message::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DataPackage_Message::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataPackage_Message::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 version = 6;
inline bool DataPackage_Message::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataPackage_Message::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataPackage_Message::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataPackage_Message::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 DataPackage_Message::version() const {
  return version_;
}
inline void DataPackage_Message::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
}

// optional int64 createTime = 7;
inline bool DataPackage_Message::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataPackage_Message::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataPackage_Message::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataPackage_Message::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 DataPackage_Message::createtime() const {
  return createtime_;
}
inline void DataPackage_Message::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 localId = 8;
inline bool DataPackage_Message::has_localid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataPackage_Message::set_has_localid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataPackage_Message::clear_has_localid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataPackage_Message::clear_localid() {
  localid_ = GOOGLE_LONGLONG(0);
  clear_has_localid();
}
inline ::google::protobuf::int64 DataPackage_Message::localid() const {
  return localid_;
}
inline void DataPackage_Message::set_localid(::google::protobuf::int64 value) {
  set_has_localid();
  localid_ = value;
}

// optional int64 serverId = 9;
inline bool DataPackage_Message::has_serverid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataPackage_Message::set_has_serverid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataPackage_Message::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataPackage_Message::clear_serverid() {
  serverid_ = GOOGLE_LONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::int64 DataPackage_Message::serverid() const {
  return serverid_;
}
inline void DataPackage_Message::set_serverid(::google::protobuf::int64 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// DataPackage_User

// optional int64 userId = 1;
inline bool DataPackage_User::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPackage_User::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPackage_User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPackage_User::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 DataPackage_User::userid() const {
  return userid_;
}
inline void DataPackage_User::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 2;
inline bool DataPackage_User::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPackage_User::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPackage_User::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPackage_User::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& DataPackage_User::username() const {
  return *username_;
}
inline void DataPackage_User::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DataPackage_User::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DataPackage_User::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataPackage_User::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* DataPackage_User::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataPackage_User::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataPackage_Group

// optional int64 groupId = 1;
inline bool DataPackage_Group::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPackage_Group::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPackage_Group::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPackage_Group::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 DataPackage_Group::groupid() const {
  return groupid_;
}
inline void DataPackage_Group::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional string groupName = 2;
inline bool DataPackage_Group::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPackage_Group::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPackage_Group::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPackage_Group::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& DataPackage_Group::groupname() const {
  return *groupname_;
}
inline void DataPackage_Group::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void DataPackage_Group::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void DataPackage_Group::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataPackage_Group::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* DataPackage_Group::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataPackage_Group::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 members = 3;
inline int DataPackage_Group::members_size() const {
  return members_.size();
}
inline void DataPackage_Group::clear_members() {
  members_.Clear();
}
inline ::google::protobuf::int64 DataPackage_Group::members(int index) const {
  return members_.Get(index);
}
inline void DataPackage_Group::set_members(int index, ::google::protobuf::int64 value) {
  members_.Set(index, value);
}
inline void DataPackage_Group::add_members(::google::protobuf::int64 value) {
  members_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DataPackage_Group::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DataPackage_Group::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// DataPackage_Data

// repeated .proto.DataPackage.Message message = 1;
inline int DataPackage_Data::message_size() const {
  return message_.size();
}
inline void DataPackage_Data::clear_message() {
  message_.Clear();
}
inline const ::proto::DataPackage_Message& DataPackage_Data::message(int index) const {
  return message_.Get(index);
}
inline ::proto::DataPackage_Message* DataPackage_Data::mutable_message(int index) {
  return message_.Mutable(index);
}
inline ::proto::DataPackage_Message* DataPackage_Data::add_message() {
  return message_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Message >&
DataPackage_Data::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Message >*
DataPackage_Data::mutable_message() {
  return &message_;
}

// optional int64 userId = 2;
inline bool DataPackage_Data::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPackage_Data::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPackage_Data::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPackage_Data::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 DataPackage_Data::userid() const {
  return userid_;
}
inline void DataPackage_Data::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 3;
inline bool DataPackage_Data::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataPackage_Data::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataPackage_Data::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataPackage_Data::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& DataPackage_Data::username() const {
  return *username_;
}
inline void DataPackage_Data::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DataPackage_Data::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DataPackage_Data::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataPackage_Data::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* DataPackage_Data::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataPackage_Data::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto.DataPackage.User user = 4;
inline int DataPackage_Data::user_size() const {
  return user_.size();
}
inline void DataPackage_Data::clear_user() {
  user_.Clear();
}
inline const ::proto::DataPackage_User& DataPackage_Data::user(int index) const {
  return user_.Get(index);
}
inline ::proto::DataPackage_User* DataPackage_Data::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::proto::DataPackage_User* DataPackage_Data::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_User >&
DataPackage_Data::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_User >*
DataPackage_Data::mutable_user() {
  return &user_;
}

// repeated .proto.DataPackage.Group group = 5;
inline int DataPackage_Data::group_size() const {
  return group_.size();
}
inline void DataPackage_Data::clear_group() {
  group_.Clear();
}
inline const ::proto::DataPackage_Group& DataPackage_Data::group(int index) const {
  return group_.Get(index);
}
inline ::proto::DataPackage_Group* DataPackage_Data::mutable_group(int index) {
  return group_.Mutable(index);
}
inline ::proto::DataPackage_Group* DataPackage_Data::add_group() {
  return group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Group >&
DataPackage_Data::group() const {
  return group_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DataPackage_Group >*
DataPackage_Data::mutable_group() {
  return &group_;
}

// -------------------------------------------------------------------

// DataPackage

// required .proto.DataPackage.CmdType cmd = 1;
inline bool DataPackage::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPackage::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPackage::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPackage::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::proto::DataPackage_CmdType DataPackage::cmd() const {
  return static_cast< ::proto::DataPackage_CmdType >(cmd_);
}
inline void DataPackage::set_cmd(::proto::DataPackage_CmdType value) {
  assert(::proto::DataPackage_CmdType_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .proto.DataPackage.Data data = 2;
inline bool DataPackage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPackage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPackage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPackage::clear_data() {
  if (data_ != NULL) data_->::proto::DataPackage_Data::Clear();
  clear_has_data();
}
inline const ::proto::DataPackage_Data& DataPackage::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto::DataPackage_Data* DataPackage::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto::DataPackage_Data;
  return data_;
}
inline ::proto::DataPackage_Data* DataPackage::release_data() {
  clear_has_data();
  ::proto::DataPackage_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DataPackage::set_allocated_data(::proto::DataPackage_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// required int32 version = 3;
inline bool DataPackage::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataPackage::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataPackage::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataPackage::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 DataPackage::version() const {
  return version_;
}
inline void DataPackage::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required int32 seqNo = 4;
inline bool DataPackage::has_seqno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataPackage::set_has_seqno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataPackage::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataPackage::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 DataPackage::seqno() const {
  return seqno_;
}
inline void DataPackage::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DataPackage_Message_MessageType>() {
  return ::proto::DataPackage_Message_MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DataPackage_Message_ContentType>() {
  return ::proto::DataPackage_Message_ContentType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DataPackage_CmdType>() {
  return ::proto::DataPackage_CmdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoMeta_2eproto__INCLUDED
